/* Generated by IDL compiler version FreeDCE 1.1.0.7 64-bit with GNU Flex/Bison */
#ifndef rpcpvt_v0_0_included
#define rpcpvt_v0_0_included
#ifndef IDLBASE_H
#include <dce/idlbase.h>
#endif

#ifdef __cplusplus
    extern "C" {
#endif

#ifndef nbase_v0_0_included
#include <dce/nbase.h>
#endif
#ifndef lbase_v0_0_included
#include <dce/lbase.h>
#endif
#ifndef rpcbase_v0_0_included
#include <dce/rpcbase.h>
#endif
#ifndef rpcsts_v0_0_included
#include <dce/rpcsts.h>
#endif
#define rpc_c_authn_dce_private rpc_c_authn_dce_secret
#define rpc_c_protseq_max_calls_default rpc_c_protseq_max_reqs_default
#define rpc_s_unknown_auth_protocol rpc_s_unknown_authn_service
#define rpc_s_cant_create_sock rpc_s_cant_create_socket
#define rpc_s_cant_bind_sock rpc_s_cant_bind_socket
#define rpc_s_cant_listen_sock rpc_s_cant_listen_socket
#define rpc_s_no_ns_privilege rpc_s_no_ns_permission
#define rpc_s_unsupported_authn_level rpc_s_unsupported_protect_level
#define rpc_s_authn_level_mismatch rpc_s_protect_level_mismatch
#define rpc_c_authn_level_default rpc_c_protect_level_default
#define rpc_c_authn_level_none rpc_c_protect_level_none
#define rpc_c_authn_level_connect rpc_c_protect_level_connect
#define rpc_c_authn_level_call rpc_c_protect_level_call
#define rpc_c_authn_level_pkt rpc_c_protect_level_pkt
#define rpc_c_authn_level_pkt_integrity rpc_c_protect_level_pkt_integ
#define rpc_c_authn_level_pkt_privacy rpc_c_protect_level_pkt_privacy
typedef rpc_ns_handle_t rpc_ns_inq_handle_t;
typedef rpc_ns_inq_handle_t *rpc_ns_inq_handle_p_t;
typedef rpc_ns_handle_t rpc_ns_lookup_handle_t;
typedef rpc_ns_lookup_handle_t *rpc_ns_lookup_handle_p_t;
typedef rpc_ns_handle_t rpc_ns_import_handle_t;
typedef rpc_ns_import_handle_t *rpc_ns_import_handle_p_t;
extern void rpc_binding_handle_copy(
#ifdef IDL_PROTOTYPES
    /* [in] */ rpc_binding_handle_t source_binding,
    /* [out] */ rpc_binding_handle_t *destination_binding,
    /* [out] */ unsigned32 *status
#endif
);
extern boolean32 rpc_binding_handle_equal(
#ifdef IDL_PROTOTYPES
    /* [in] */ rpc_binding_handle_t binding1,
    /* [in] */ rpc_binding_handle_t binding2,
    /* [out] */ unsigned32 *status
#endif
);
extern void rpc_binding_server_to_client(
#ifdef IDL_PROTOTYPES
    /* [in] */ rpc_binding_handle_t sbinding_handle,
    /* [out] */ rpc_binding_handle_t *cbinding_handle,
    /* [out] */ unsigned32 *status
#endif
);
extern void rpc_binding_to_epmap(
#ifdef IDL_PROTOTYPES
    /* [in] */ rpc_binding_handle_t input_binding,
    /* [out] */ rpc_binding_handle_t *output_binding,
    /* [out] */ unsigned32 *status
#endif
);
typedef rpc_opaque_ptr_t rpc_thread_pool_handle_t;
typedef rpc_thread_pool_handle_t *rpc_thread_pool_handle_p_t;
extern void rpc_server_create_thread_pool(
#ifdef IDL_PROTOTYPES
    /* [in] */ unsigned32 num_threads,
    /* [out] */ rpc_thread_pool_handle_t *phandle,
    /* [out] */ unsigned32 *status
#endif
);
extern void rpc_server_free_thread_pool(
#ifdef IDL_PROTOTYPES
    /* [in, out] */ rpc_thread_pool_handle_t *phandle,
    /* [in] */ boolean32 wait_flag,
    /* [out] */ unsigned32 *status
#endif
);
typedef void (*rpc_thread_pool_fn_t)(
#ifdef IDL_PROTOTYPES
    /* [in] */ uuid_p_t obj_uuid,
    /* [in] */ rpc_if_id_p_t if_id,
    /* [in] */ unsigned32 opnum,
    /* [out] */ rpc_thread_pool_handle_t *phandle,
    /* [out] */ unsigned32 *status
#endif
);
extern void rpc_server_set_thread_pool_fn(
#ifdef IDL_PROTOTYPES
    /* [in] */ rpc_thread_pool_fn_t pool_fn,
    /* [out] */ unsigned32 *status
#endif
);
extern void rpc_server_set_thread_pool_qlen(
#ifdef IDL_PROTOTYPES
    /* [in] */ rpc_thread_pool_handle_t phandle,
    /* [in] */ unsigned32 queue_size,
    /* [out] */ unsigned32 *status
#endif
);
extern void rpc_tower_to_binding(
#ifdef IDL_PROTOTYPES
    /* [in] */ byte_p_t prot_tower,
    /* [out] */ rpc_binding_handle_t *binding,
    /* [out] */ unsigned32 *status
#endif
);
extern void rpc_tower_vector_from_binding(
#ifdef IDL_PROTOTYPES
    /* [in] */ rpc_if_handle_t if_spec,
    /* [in] */ rpc_binding_handle_t binding,
    /* [out] */ rpc_tower_vector_p_t *twr_vector,
    /* [out] */ unsigned32 *status
#endif
);
extern void rpc_tower_vector_free(
#ifdef IDL_PROTOTYPES
    /* [in, out] */ rpc_tower_vector_p_t *twr_vector,
    /* [out] */ unsigned32 *status
#endif
);
extern void rpc_ns_entry_inq_resolution(
#ifdef IDL_PROTOTYPES
    /* [in] */ unsigned32 entry_name_syntax,
    /* [in] */ unsigned_char_p_t entry_name,
    /* [out] */ unsigned_char_p_t *resolved_name,
    /* [out] */ unsigned_char_p_t *unresolved_name,
    /* [out] */ unsigned32 *status
#endif
);
extern void rpc_ns_set_authn(
#ifdef IDL_PROTOTYPES
    /* [in] */ boolean32 authn,
    /* [out] */ boolean32 *previous_authn,
    /* [out] */ unsigned32 *status
#endif
);
extern void rpc_mgmt_inq_dflt_authn_level(
#ifdef IDL_PROTOTYPES
    /* [in] */ unsigned32 authn_svc,
    /* [out] */ unsigned32 *authn_level,
    /* [out] */ unsigned32 *st
#endif
);
extern void rpc_mgmt_set_max_concurrency(
#ifdef IDL_PROTOTYPES
    /* [in] */ unsigned32 max_client_calls,
    /* [in] */ unsigned32 max_server_calls,
    /* [out] */ unsigned32 *status
#endif
);
extern unsigned32 rpc_mgmt_get_max_concurrency(
#ifdef IDL_PROTOTYPES
    void
#endif
);
extern void rpc_mgmt_set_server_com_timeout(
#ifdef IDL_PROTOTYPES
    /* [in] */ unsigned32 timeout,
    /* [out] */ unsigned32 *status
#endif
);
extern unsigned32 rpc_mgmt_inq_server_com_timeout(
#ifdef IDL_PROTOTYPES
    void
#endif
);
extern void rpc_binding_inq_client(
#ifdef IDL_PROTOTYPES
    /* [in] */ rpc_binding_handle_t binding_handle,
    /* [out] */ rpc_client_handle_t *client_handle,
    /* [out] */ unsigned32 *status
#endif
);
extern void rpc_call_block_until_free(
#ifdef IDL_PROTOTYPES
    /* [in] */ rpc_call_handle_t call_handle,
    /* [out] */ unsigned32 *status
#endif
);
extern void rpc_call_cancel(
#ifdef IDL_PROTOTYPES
    /* [in] */ rpc_call_handle_t call_handle,
    /* [out] */ unsigned32 *status
#endif
);
extern boolean32 rpc_call_did_mgr_execute(
#ifdef IDL_PROTOTYPES
    /* [in] */ rpc_call_handle_t call_handle,
    /* [out] */ unsigned32 *status
#endif
);
extern void rpc_call_end(
#ifdef IDL_PROTOTYPES
    /* [in, out] */ rpc_call_handle_t *call_handle,
    /* [out] */ unsigned32 *status
#endif
);
extern void rpc_call_transmit_fault(
#ifdef IDL_PROTOTYPES
    /* [in] */ rpc_call_handle_t call_handle,
    /* [in] */ rpc_iovector_p_t fault_info,
    /* [out] */ unsigned32 *status
#endif
);
extern void rpc_call_receive(
#ifdef IDL_PROTOTYPES
    /* [in] */ rpc_call_handle_t call_handle,
    /* [out] */ rpc_iovector_elt_t *call_args,
    /* [out] */ unsigned32 *status
#endif
);
extern void rpc_call_receive_fault(
#ifdef IDL_PROTOTYPES
    /* [in] */ rpc_call_handle_t call_handle,
    /* [out] */ rpc_iovector_elt_t *fault_info,
    /* [out] */ ndr_format_t *remote_ndr_fmt,
    /* [out] */ unsigned32 *status
#endif
);
extern void rpc_call_start(
#ifdef IDL_PROTOTYPES
    /* [in] */ rpc_binding_handle_t binding_handle,
    /* [in] */ unsigned32 call_options,
    /* [in] */ rpc_if_handle_t if_spec,
    /* [in] */ unsigned32 operation_number,
    /* [out] */ rpc_call_handle_t *call_handle,
    /* [out] */ rpc_transfer_syntax_t *xfer_syntax,
    /* [out] */ unsigned32 *status
#endif
);
extern void rpc_call_transceive(
#ifdef IDL_PROTOTYPES
    /* [in] */ rpc_call_handle_t call_handle,
    /* [in] */ rpc_iovector_p_t in_call_args,
    /* [out] */ rpc_iovector_elt_t *out_call_args,
    /* [out] */ ndr_format_t *remote_ndr_fmt,
    /* [out] */ unsigned32 *status
#endif
);
extern void rpc_call_transmit(
#ifdef IDL_PROTOTYPES
    /* [in] */ rpc_call_handle_t call_handle,
    /* [in] */ rpc_iovector_p_t call_args,
    /* [out] */ unsigned32 *status
#endif
);
extern void rpc_network_maintain_liveness(
#ifdef IDL_PROTOTYPES
    /* [in] */ rpc_binding_handle_t binding_handle,
    /* [out] */ unsigned32 *status
#endif
);
extern void rpc_network_monitor_liveness(
#ifdef IDL_PROTOTYPES
    /* [in] */ rpc_binding_handle_t binding_handle,
    /* [in] */ rpc_client_handle_t client_handle,
    /* [in] */ rpc_network_rundown_fn_t rundown_fn,
    /* [out] */ unsigned32 *status
#endif
);
extern void rpc_network_stop_maintaining(
#ifdef IDL_PROTOTYPES
    /* [in] */ rpc_binding_handle_t binding_handle,
    /* [out] */ unsigned32 *status
#endif
);
extern void rpc_network_stop_monitoring(
#ifdef IDL_PROTOTYPES
    /* [in] */ rpc_binding_handle_t binding_handle,
    /* [in] */ rpc_client_handle_t client_handle,
    /* [out] */ unsigned32 *status
#endif
);
extern void rpc_util_strcvt(
#ifdef IDL_PROTOTYPES
    /* [in] */ boolean32 to_ascii,
    /* [in] */ unsigned32 len,
    /* [in] */ byte_p_t src,
    /* [in] */ byte_p_t dst
#endif
);
extern unsigned_char_p_t rpc_stralloc(
#ifdef IDL_PROTOTYPES
    /* [in] */ unsigned_char_p_t string
#endif
);

#ifdef __cplusplus
    }
#endif

#endif
