/* $Id: objex.idl,v 1.1 2001/07/26 18:56:14 wez Exp $
 * This file is derived from the COM specification,
 * Copyright (C) Microsoft Corporation, 1992-1995.
 * 
 * Interface Implemented by object exporters.
 * This is the interface that needs to be supported by hosts that export
 * objects. Only one instance of the interface can be exported by the host.
 *
 * An object exporter needs to be able to:
 * 1. return string bindings that can be used to talk to objects it has
 *    exported.
 * 2. receive pings from object importers to keep the objects alive.
 * */
[
	uuid(99fcfec4-5260-101b-bbcb-00aa0021347a),
	endpoint("ncadg_ip_udp:[135]", "ncadg_dds:[12]", "ncacn_ip_tcp:[135]",
		"ncacn_dnet_nsp:[#69]"),
	pointer_default(unique)
]
interface IObjectExporter
{
	import "dce/wtypes.idl";
	import "dce/obase.idl";

	/* method to get the protocol sequences, string bindings and machine id for
	 * an object server given its OXID. */
	[idempotent] error_status_t ResolveOxid
		(
		 [in]			handle_t			hRpc,
		 [in]			OXID				*pOxid,
		 [in]			unsigned short	cRequestedProtseqs,
		 [in, ref, size_is(cRequestedProtseqs)]
		 unsigned short	arRequestedProtseqs[],
		 [out, ref] DUALSTRINGARRAY		**psaOxidBindings,
		 [out, ref] IPID				*pipidRemUnknown,
		 [out, ref] DWORD				*pAuthnHint
		);

	/* Simple ping is used to ping a Set. Client machines use this to inform
	 * the ovject exporter that it is still using the items inside the set.
	 * Returns S_TRUE if the SetId is known by the object exporter, S_FALSE if
	 * not. */

	[idempotent] error_status_t	SimplePing
		(
		 [in]	handle_t	hRpc,
		 [in] SETID		*pSetId	// Must not be zero
		);

	/* Complex Ping is used to create sets of OIDs to ping. The whole set can
	 * subsequently be pinged using SimplePing, thus reducing network traffic.
	 * */

	[idempotent] error_status_t	ComplexPing
		(
		 [in]				handle_t			hRpc,
		 [in, out]		SETID				*pSetId,
		 [in]		unsigned short	SequenceNum,
		 [in]		unsigned short cAddToSet,
		 [in]		unsigned short cDelFromSet,
		 [in, unique, size_is(cAddToSet)] OID AddToSet[],
		 [in, unique, size_is(cDelFromSet)] OID DelFromSet[],
		 [out]	unsigned short *pPingBackoffFactor // 2^factor = multiplier
		);

	// In some cases the client may be unsure that a particular binding
	// will reach the server. (For example, when the oxid bindings have
	// more than one TCP/IP binding). This call can be used to validate
	// the binding from the client.
	[idempotent] error_status_t	ServerAlive(
		[in] handle_t hRpc
	);

	// Method to get the protocol sequences, string bindings, RemoteUnknown IPID,
	// and COM version for an object server given its OXID. Supported by
	// DCOM version 5.2 and above.

	[idempotent] error_status_t ResolveOxid2
	(
	[in]		handle_t 	hRpc,
	[in]		OXID			*pOxid,
	[in]		unsigned short	cRequestedProtseqs,
	[in, ref, size_is(cRequestedProtseqs)]	unsigned short arRequestedProtseqs[],
	[out, ref]	DUALSTRINGARRAY	**ppdsaOxidBindings,
	[out, ref]	IPID					*pipidRemUnknown,
	[out, ref]	DWORD					*pAuthnHint,
	[out, ref]	COMVERSION			*pComVersion
	);
}
