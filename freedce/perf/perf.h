/* Generated by IDL compiler version FreeDCE 1.0.1 64-bit with GNU Flex/Bison */
#ifndef perf_v2_0_included
#define perf_v2_0_included
#ifndef IDL_DOUBLE_USED
#define IDL_DOUBLE_USED
#endif
#ifndef IDLBASE_H
#include <dce/idlbase.h>
#endif
#include <dce/rpc.h>

#ifdef __cplusplus
    extern "C" {
#endif

#ifndef nbase_v0_0_included
#include <dce/nbase.h>
#endif
#define perf_magic (0x1b0)
typedef idl_ulong_int perf_data_t[1];
typedef idl_ulong_int perf_slow_mode_t;
#define perf_slow_sleep (0x0)
#define perf_slow_io (0x1)
#define perf_slow_cpu (0x2)
#define perf_slow_fork_sleep (0x3)
typedef idl_void_p_t perf_context_t;
extern void perf_init(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t handle
#endif
);
extern void perf_info(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t handle,
    /* [out] */ idl_ulong_int *n,
    /* [out] */ idl_ulong_int *nm,
    /* [out] */ idl_ulong_int *nb,
    /* [out] */ idl_ulong_int *nbm
#endif
);
extern void perf_null(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t handle
#endif
);
extern void perf_null_idem(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t handle
#endif
);
extern void perf_in(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t handle,
    /* [in] */ perf_data_t data,
    /* [in] */ idl_ulong_int l,
    /* [in] */ idl_boolean v,
    /* [out] */ idl_ulong_int *sum
#endif
);
extern void perf_in_idem(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t handle,
    /* [in] */ perf_data_t data,
    /* [in] */ idl_ulong_int l,
    /* [in] */ idl_boolean v,
    /* [out] */ idl_ulong_int *sum
#endif
);
extern void perf_out(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t handle,
    /* [out] */ perf_data_t data,
    /* [in, out] */ idl_ulong_int *l,
    /* [in] */ idl_ulong_int m,
    /* [in] */ idl_ulong_int p,
    /* [in] */ idl_boolean v
#endif
);
extern void perf_out_idem(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t handle,
    /* [out] */ perf_data_t data,
    /* [in, out] */ idl_ulong_int *l,
    /* [in] */ idl_ulong_int m,
    /* [in] */ idl_ulong_int p,
    /* [in] */ idl_boolean v
#endif
);
extern void perf_brd(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t handle,
    /* [out] */ idl_char name[256]
#endif
);
extern void perf_maybe(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t handle
#endif
);
extern void perf_brd_maybe(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t handle
#endif
);
extern void perf_fp_test(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t handle,
    /* [in] */ idl_short_float *float1,
    /* [in] */ idl_short_float *float2,
    /* [in] */ idl_long_float double1,
    /* [in] */ idl_long_float double2,
    /* [out] */ idl_short_float *out1,
    /* [out] */ idl_long_float *out2
#endif
);
extern void perf_register_b(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t handle,
    /* [in] */ idl_boolean global,
    /* [out] */ unsigned32 *status
#endif
);
extern void perf_unregister_b(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t handle,
    /* [out] */ unsigned32 *status
#endif
);
extern void perf_exception(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t handle
#endif
);
extern void perf_null_slow(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t handle,
    /* [in] */ perf_slow_mode_t mode,
    /* [in] */ idl_ulong_int seconds
#endif
);
extern void perf_null_slow_idem(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t handle,
    /* [in] */ perf_slow_mode_t mode,
    /* [in] */ idl_ulong_int seconds
#endif
);
extern void perf_shutdown(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t handle
#endif
);
extern void perf_call_callback(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t handle,
    /* [in] */ idl_ulong_int idempotent
#endif
);
extern void perf_get_context(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t handle,
    /* [in] */ idl_ulong_int data,
    /* [out] */ perf_context_t *context
#endif
);
extern idl_boolean perf_test_context(
#ifdef IDL_PROTOTYPES
    /* [in] */ perf_context_t context,
    /* [out] */ idl_ulong_int *data
#endif
);
extern idl_boolean perf_free_context(
#ifdef IDL_PROTOTYPES
    /* [in, out] */ perf_context_t *context,
    /* [out] */ idl_ulong_int *data
#endif
);
extern void perf_shutdown2(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t handle,
    /* [in] */ unsigned32 secs
#endif
);
extern void perf_brd_fault(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t handle
#endif
);
void perf_context_t_rundown(
#ifdef IDL_PROTOTYPES
    rpc_ss_context_t context_handle
#endif
);
typedef struct perf_v2_0_epv_t {
	void (*perf_init)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t handle
#endif
);
	void (*perf_info)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t handle,
    /* [out] */ idl_ulong_int *n,
    /* [out] */ idl_ulong_int *nm,
    /* [out] */ idl_ulong_int *nb,
    /* [out] */ idl_ulong_int *nbm
#endif
);
	void (*perf_null)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t handle
#endif
);
	void (*perf_null_idem)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t handle
#endif
);
	void (*perf_in)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t handle,
    /* [in] */ perf_data_t data,
    /* [in] */ idl_ulong_int l,
    /* [in] */ idl_boolean v,
    /* [out] */ idl_ulong_int *sum
#endif
);
	void (*perf_in_idem)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t handle,
    /* [in] */ perf_data_t data,
    /* [in] */ idl_ulong_int l,
    /* [in] */ idl_boolean v,
    /* [out] */ idl_ulong_int *sum
#endif
);
	void (*perf_out)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t handle,
    /* [out] */ perf_data_t data,
    /* [in, out] */ idl_ulong_int *l,
    /* [in] */ idl_ulong_int m,
    /* [in] */ idl_ulong_int p,
    /* [in] */ idl_boolean v
#endif
);
	void (*perf_out_idem)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t handle,
    /* [out] */ perf_data_t data,
    /* [in, out] */ idl_ulong_int *l,
    /* [in] */ idl_ulong_int m,
    /* [in] */ idl_ulong_int p,
    /* [in] */ idl_boolean v
#endif
);
	void (*perf_brd)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t handle,
    /* [out] */ idl_char name[256]
#endif
);
	void (*perf_maybe)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t handle
#endif
);
	void (*perf_brd_maybe)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t handle
#endif
);
	void (*perf_fp_test)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t handle,
    /* [in] */ idl_short_float *float1,
    /* [in] */ idl_short_float *float2,
    /* [in] */ idl_long_float double1,
    /* [in] */ idl_long_float double2,
    /* [out] */ idl_short_float *out1,
    /* [out] */ idl_long_float *out2
#endif
);
	void (*perf_register_b)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t handle,
    /* [in] */ idl_boolean global,
    /* [out] */ unsigned32 *status
#endif
);
	void (*perf_unregister_b)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t handle,
    /* [out] */ unsigned32 *status
#endif
);
	void (*perf_exception)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t handle
#endif
);
	void (*perf_null_slow)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t handle,
    /* [in] */ perf_slow_mode_t mode,
    /* [in] */ idl_ulong_int seconds
#endif
);
	void (*perf_null_slow_idem)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t handle,
    /* [in] */ perf_slow_mode_t mode,
    /* [in] */ idl_ulong_int seconds
#endif
);
	void (*perf_shutdown)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t handle
#endif
);
	void (*perf_call_callback)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t handle,
    /* [in] */ idl_ulong_int idempotent
#endif
);
	void (*perf_get_context)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t handle,
    /* [in] */ idl_ulong_int data,
    /* [out] */ perf_context_t *context
#endif
);
	idl_boolean (*perf_test_context)(
#ifdef IDL_PROTOTYPES
    /* [in] */ perf_context_t context,
    /* [out] */ idl_ulong_int *data
#endif
);
	idl_boolean (*perf_free_context)(
#ifdef IDL_PROTOTYPES
    /* [in, out] */ perf_context_t *context,
    /* [out] */ idl_ulong_int *data
#endif
);
	void (*perf_shutdown2)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t handle,
    /* [in] */ unsigned32 secs
#endif
);
	void (*perf_brd_fault)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t handle
#endif
);
} perf_v2_0_epv_t;
extern rpc_if_handle_t perf_v2_0_c_ifspec;
extern rpc_if_handle_t perf_v2_0_s_ifspec;

#ifdef __cplusplus
    }
#endif

#endif
