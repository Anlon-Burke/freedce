/* Generated by IDL compiler version OSF DCE T1.1.0-03 with GNU Flex/Bison */
#ifndef dsm_v0_0_included
#define dsm_v0_0_included
#ifndef IDLBASE_H
#include <dce/idlbase.h>
#endif

#ifdef __cplusplus
    extern "C" {
#endif

#ifndef nbase_v0_0_included
#include <dce/nbase.h>
#endif
#define dsm_mod (470482944)
#define dsm_err_create_failed (470482945)
#define dsm_err_file_io_error (470482946)
#define dsm_err_open_failed (470482947)
#define dsm_err_version (470482948)
#define dsm_err_no_memory (470482949)
#define dsm_err_duplicate_write (470482950)
#define dsm_err_header_too_long (470482951)
#define dsm_err_no_more_entries (470482952)
#define dsm_err_invalid_handle (470482953)
#define dsm_err_invalid_pointer (470482954)
#define dsm_err_info_too_long (470482955)
#define dsm_err_file_busy (470482956)
#define dsm_err_invalid_marker (470482957)
typedef idl_void_p_t dsm_handle_t;
typedef idl_ulong_int dsm_marker_t;
typedef struct dsm_stats_t {
idl_ulong_int size;
idl_ulong_int free_space;
idl_ulong_int largest_free;
} dsm_stats_t;
#define dsm_version (1)
#define dsm_hdr_size (48)
#define dsm_magic_marker (-268435441)
extern void dsm_create(
#ifdef IDL_PROTOTYPES
    /* [in] */ idl_char *fname,
    /* [out] */ dsm_handle_t *dsh,
    /* [out] */ error_status_t *st
#endif
);
extern void dsm_open(
#ifdef IDL_PROTOTYPES
    /* [in] */ idl_char *fname,
    /* [out] */ dsm_handle_t *dsh,
    /* [out] */ error_status_t *st
#endif
);
extern void dsm_close(
#ifdef IDL_PROTOTYPES
    /* [in, out] */ dsm_handle_t *dsh,
    /* [out] */ error_status_t *st
#endif
);
extern void dsm_allocate(
#ifdef IDL_PROTOTYPES
    /* [in] */ dsm_handle_t dsh,
    /* [in] */ idl_ulong_int len,
    /* [out] */ idl_void_p_t *p,
    /* [out] */ error_status_t *st
#endif
);
extern void dsm_write(
#ifdef IDL_PROTOTYPES
    /* [in] */ dsm_handle_t dsh,
    /* [in] */ idl_void_p_t p,
    /* [out] */ error_status_t *st
#endif
);
extern void dsm_write_hdr(
#ifdef IDL_PROTOTYPES
    /* [in] */ dsm_handle_t dsh,
    /* [in] */ idl_void_p_t p,
    /* [in] */ idl_ulong_int len,
    /* [out] */ error_status_t *st
#endif
);
extern void dsm_free(
#ifdef IDL_PROTOTYPES
    /* [in] */ dsm_handle_t dsh,
    /* [in] */ idl_void_p_t p,
    /* [out] */ error_status_t *st
#endif
);
extern void dsm_detach(
#ifdef IDL_PROTOTYPES
    /* [in] */ dsm_handle_t dsh,
    /* [in] */ idl_void_p_t p,
    /* [out] */ error_status_t *st
#endif
);
extern void dsm_get_info(
#ifdef IDL_PROTOTYPES
    /* [in] */ dsm_handle_t dsh,
    /* [in] */ idl_void_p_t info,
    /* [in] */ idl_ulong_int len,
    /* [out] */ error_status_t *st
#endif
);
extern void dsm_set_info(
#ifdef IDL_PROTOTYPES
    /* [in] */ dsm_handle_t dsh,
    /* [in] */ idl_void_p_t info,
    /* [in] */ idl_ulong_int len,
    /* [out] */ error_status_t *st
#endif
);
extern void dsm_read(
#ifdef IDL_PROTOTYPES
    /* [in] */ dsm_handle_t dsh,
    /* [in, out] */ dsm_marker_t *marker,
    /* [out] */ idl_void_p_t *p,
    /* [out] */ error_status_t *st
#endif
);
extern void dsm_marker_reset(
#ifdef IDL_PROTOTYPES
    /* [in, out] */ dsm_marker_t *marker
#endif
);
extern void dsm_locate(
#ifdef IDL_PROTOTYPES
    /* [in] */ dsm_handle_t dsh,
    /* [in] */ dsm_marker_t marker,
    /* [out] */ idl_void_p_t *p,
    /* [out] */ error_status_t *st
#endif
);
extern void dsm_inq_marker(
#ifdef IDL_PROTOTYPES
    /* [in] */ dsm_handle_t dsh,
    /* [in] */ idl_void_p_t p,
    /* [out] */ dsm_marker_t *marker,
    /* [out] */ error_status_t *st
#endif
);
extern void dsm_inq_size(
#ifdef IDL_PROTOTYPES
    /* [in] */ dsm_handle_t dsh,
    /* [in] */ idl_void_p_t p,
    /* [out] */ unsigned32 *size,
    /* [out] */ error_status_t *st
#endif
);
extern void dsm_get_stats(
#ifdef IDL_PROTOTYPES
    /* [in] */ dsm_handle_t dsh,
    /* [out] */ dsm_stats_t *stats,
    /* [out] */ error_status_t *st
#endif
);
extern idl_boolean dsm_reclaim(
#ifdef IDL_PROTOTYPES
    /* [in, out] */ dsm_handle_t *dsh,
    /* [in] */ idl_char *fname,
    /* [in] */ idl_char *tempname,
    /* [in] */ idl_char *oldname,
    /* [in] */ unsigned32 free_pct,
    /* [out] */ error_status_t *st
#endif
);

#ifdef __cplusplus
    }
#endif

#endif
